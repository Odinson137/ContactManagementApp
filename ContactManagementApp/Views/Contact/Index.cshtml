@model IEnumerable<ContactManagementApp.DTO.ContactDto>

<div class="container mt-4">
    <h2>Контакты</h2>
    <button class="btn btn-primary mb-3" onclick="showCreateModal()">Добавить контакт</button>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Имя</th>
            <th>Телефон</th>
            <th>Должность</th>
            <th>Дата рождения</th>
            <th>Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var contact in Model)
        {
        <tr>
            <td>@contact.Name</td>
            <td>@contact.MobilePhone</td>
            <td>@contact.JobTitle</td>
            <td>@(contact.BirthDate?.ToString("yyyy-MM-dd") ?? "Не указана")</td>
            <td>
                <button class="btn btn-sm btn-warning" onclick="showEditModal(@contact.Id)">Редактировать</button>
                <button class="btn btn-sm btn-danger" onclick="deleteContact(@contact.Id)">Удалить</button>
            </td>
        </tr>
        }
        </tbody>
    </table>

    <div class="modal fade" id="contactModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">Добавить контакт</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="contactForm">
                        <input type="hidden" id="contactId" name="Id" />
                        <div class="mb-3">
                            <label class="form-label">Имя</label>
                            <input type="text" class="form-control" id="name" name="Name" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Телефон</label>
                            <input type="text" class="form-control" id="mobilePhone" name="MobilePhone" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Должность</label>
                            <input type="text" class="form-control" id="jobTitle" name="JobTitle">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Дата рождения</label>
                            <input type="date" class="form-control" id="birthDate" name="BirthDate">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary" onclick="saveContact()">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function validateForm() {
        let isValid = true;
        const name = $('#name');
        const mobilePhone = $('#mobilePhone');
        const jobTitle = $('#jobTitle');

        $('.form-control').removeClass('is-invalid');
        $('.invalid-feedback').text('');

        if (!name.val()) {
            name.addClass('is-invalid');
            name.siblings('.invalid-feedback').text('Имя обязательно');
            isValid = false;
        } else if (name.val().length > 100) {
            name.addClass('is-invalid');
            name.siblings('.invalid-feedback').text('Имя не длиннее 100 символов');
            isValid = false;
        }

        const phoneRegex = /^\+?\d{10,15}$/;
        if (!mobilePhone.val()) {
            mobilePhone.addClass('is-invalid');
            mobilePhone.siblings('.invalid-feedback').text('Телефон обязателен');
            isValid = false;
        } else if (!phoneRegex.test(mobilePhone.val())) {
            mobilePhone.addClass('is-invalid');
            mobilePhone.siblings('.invalid-feedback').text('Неверный формат телефона');
            isValid = false;
        }

        if (jobTitle.val().length > 100) {
            jobTitle.addClass('is-invalid');
            jobTitle.siblings('.invalid-feedback').text('Должность не длиннее 100 символов');
            isValid = false;
        }

        return isValid;
    }

    function showCreateModal() {
        $('#modalTitle').text('Добавить контакт');
        $('#contactForm')[0].reset();
        $('#contactId').val('');
        $('.form-control').removeClass('is-invalid');
        $('.invalid-feedback').text('');
        $('#contactModal').modal('show');
    }

    async function showEditModal(id) {
        const response = await fetch(`/Contact/Edit/${id}`);
        if (!response.ok) {
            alert('Не удалось загрузить контакт');
            return;
        }
        const data = await response.json();
        $('#modalTitle').text('Редактировать контакт');
        $('#contactId').val(data.id);
        $('#name').val(data.name);
        $('#mobilePhone').val(data.mobilePhone);
        $('#jobTitle').val(data.jobTitle);
        $('#birthDate').val(data.birthDate ? new Date(data.birthDate).toISOString().split('T')[0] : '');
        $('#contactModal').modal('show');
    }

    async function saveContact() {
        if (!validateForm()) return;

        const contact = {
            Id: $('#contactId').val() || 0,
            Name: $('#name').val(),
            MobilePhone: $('#mobilePhone').val(),
            JobTitle: $('#jobTitle').val(),
            BirthDate: $('#birthDate').val() || null
        };

        const url = contact.Id ? '/Contact/Edit' : '/Contact/Create';

        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(contact)
        });

        if (!response.ok) {
            alert('Ошибка при сохранении контакта');
            return;
        }

        $('#contactModal').modal('hide');
        location.reload();
    }

    async function deleteContact(id) {
        if (!confirm('Уверены, что хотите удалить контакт?')) return;

        const response = await fetch(`/Contact/Delete/${id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            alert('Ошибка при удалении контакта');
            return;
        }

        location.reload();
    }
</script>